# Generated by Django 5.2 on 2025-04-30 19:55

from django.db import migrations

# Data for initial load
DOG_BREEDS = [
    "Labrador Retriever", "French Bulldog", "Golden Retriever", "German Shepherd", "Poodle",
    "Bulldog", "Beagle", "Rottweiler", "German Shorthaired Pointer", "Dachshund",
    "Pembroke Welsh Corgi", "Australian Shepherd", "Yorkshire Terrier", "Boxer", "Cavalier King Charles Spaniel",
    "Doberman Pinscher", "Great Dane", "Miniature Schnauzer", "Siberian Husky", "Bernese Mountain Dog",
    "Cocker Spaniel", "Shih Tzu", "Boston Terrier", "Pomeranian", "Havanese",
    "Shetland Sheepdog", "Brittany", "English Springer Spaniel", "Border Collie", "Vizsla",
    "Basset Hound", "Chihuahua", "Mastiff", "Maltese", "Weimaraner",
    "Newfoundland", "Collie", "Rhodesian Ridgeback", "West Highland White Terrier", "Bichon Frise",
    "Belgian Malinois", "St. Bernard", "Akita", "Soft Coated Wheaten Terrier", "Papillon",
    "Bloodhound", "Bullmastiff", "Chesapeake Bay Retriever", "Lhasa Apso", "Chinese Shar-Pei",
    "Airedale Terrier", "Alaskan Malamute", "Australian Cattle Dog", "Whippet", "Samoyed",
    "Cairn Terrier", "Scottish Terrier", "Old English Sheepdog", "Italian Greyhound", "Greater Swiss Mountain Dog",
    "Wirehaired Pointing Griffon", "Dalmatian", "Irish Setter", "Anatolian Shepherd Dog", "American Staffordshire Terrier",
    "Basenji", "Pekingese", "Toy Fox Terrier", "Norwegian Elkhound", "Japanese Chin",
    "Norwich Terrier", "American Eskimo Dog", "Miniature Bull Terrier", "Chinese Crested", "Tibetan Terrier",
    "Brussels Griffon", "Standard Schnauzer", "Ibizan Hound", "Rat Terrier", "Saluki",
    "Tibetan Spaniel", "Manchester Terrier", "Belgian Tervuren", "Plott", "Smooth Fox Terrier",
    "Keeshond", "English Setter", "English Toy Spaniel", "Gordon Setter", "Australian Terrier",
    "Beauceron", "American Hairless Terrier", "Skye Terrier", "Finnish Spitz", "Lakeland Terrier",
    "Norfolk Terrier", "Redbone Coonhound", "Harrier", "Sealyham Terrier", "Leonberger",
    "Silky Terrier", "Boerboel", "Dandie Dinmont Terrier", "Komondor", "Clumber Spaniel", "Mongrel"
]

CAT_BREEDS = [
    "Persian", "Maine Coon", "Ragdoll", "Siamese", "Bengal",
    "British Shorthair", "Abyssinian", "Sphynx", "Scottish Fold", "American Shorthair",
    "Oriental Shorthair", "Russian Blue", "Norwegian Forest", "Birman", "Savannah",
    "Devon Rex", "Himalayan", "Turkish Angora", "Manx", "Balinese", "Domestic Short Hair"
]

HORSE_BREEDS = [
    "Arabian", "Thoroughbred", "Quarter Horse", "Appaloosa", "Paint",
    "Morgan", "Friesian", "Clydesdale", "Andalusian", "Tennessee Walking Horse"
]

def load_initial_data(apps, schema_editor):
    """Loads initial Species and Breeds into the database."""
    Species = apps.get_model('main', 'Species')
    Breed = apps.get_model('main', 'Breed')
    db_alias = schema_editor.connection.alias

    # Create Species
    dog, _ = Species.objects.using(db_alias).get_or_create(code='DOG')
    cat, _ = Species.objects.using(db_alias).get_or_create(code='CAT')
    horse, _ = Species.objects.using(db_alias).get_or_create(code='HORSE')

    # Create Breeds (using bulk_create for efficiency)
    breeds_to_create = []
    for breed_name in DOG_BREEDS:
        breeds_to_create.append(Breed(species=dog, name=breed_name))
    for breed_name in CAT_BREEDS:
        breeds_to_create.append(Breed(species=cat, name=breed_name))
    for breed_name in HORSE_BREEDS:
        breeds_to_create.append(Breed(species=horse, name=breed_name))

    Breed.objects.using(db_alias).bulk_create(breeds_to_create, ignore_conflicts=True)

def remove_initial_data(apps, schema_editor):
    """Removes the initial Species and Breeds (use with caution)."""
    Species = apps.get_model('main', 'Species')
    Breed = apps.get_model('main', 'Breed')
    db_alias = schema_editor.connection.alias

    # Be careful with deletion - this removes ALL breeds associated with these species
    Breed.objects.using(db_alias).filter(species__code__in=['DOG', 'CAT', 'HORSE']).delete()
    Species.objects.using(db_alias).filter(code__in=['DOG', 'CAT', 'HORSE']).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0003_species_breed'), # Depends on the previous migration that created the models
    ]

    operations = [
        migrations.RunPython(load_initial_data, reverse_code=remove_initial_data),
    ]
